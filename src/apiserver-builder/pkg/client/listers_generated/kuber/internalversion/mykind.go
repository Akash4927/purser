/*
 * licensed to vmware.
 */

// This file was automatically generated by lister-gen

package internalversion

import (
	kuber "apiserver-builder/pkg/apis/kuber"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MyKindLister helps list MyKinds.
type MyKindLister interface {
	// List lists all MyKinds in the indexer.
	List(selector labels.Selector) (ret []*kuber.MyKind, err error)
	// MyKinds returns an object that can list and get MyKinds.
	MyKinds(namespace string) MyKindNamespaceLister
	MyKindListerExpansion
}

// myKindLister implements the MyKindLister interface.
type myKindLister struct {
	indexer cache.Indexer
}

// NewMyKindLister returns a new MyKindLister.
func NewMyKindLister(indexer cache.Indexer) MyKindLister {
	return &myKindLister{indexer: indexer}
}

// List lists all MyKinds in the indexer.
func (s *myKindLister) List(selector labels.Selector) (ret []*kuber.MyKind, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*kuber.MyKind))
	})
	return ret, err
}

// MyKinds returns an object that can list and get MyKinds.
func (s *myKindLister) MyKinds(namespace string) MyKindNamespaceLister {
	return myKindNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MyKindNamespaceLister helps list and get MyKinds.
type MyKindNamespaceLister interface {
	// List lists all MyKinds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*kuber.MyKind, err error)
	// Get retrieves the MyKind from the indexer for a given namespace and name.
	Get(name string) (*kuber.MyKind, error)
	MyKindNamespaceListerExpansion
}

// myKindNamespaceLister implements the MyKindNamespaceLister
// interface.
type myKindNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MyKinds in the indexer for a given namespace.
func (s myKindNamespaceLister) List(selector labels.Selector) (ret []*kuber.MyKind, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*kuber.MyKind))
	})
	return ret, err
}

// Get retrieves the MyKind from the indexer for a given namespace and name.
func (s myKindNamespaceLister) Get(name string) (*kuber.MyKind, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(kuber.Resource("mykind"), name)
	}
	return obj.(*kuber.MyKind), nil
}
